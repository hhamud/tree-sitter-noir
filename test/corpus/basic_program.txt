================================================================================
Basic Program
================================================================================


use dep::std;

mod secp256k1;

fn ecrecover(
    pub_key_x: [u8; 32],
    pub_key_y: [u8; 32],
    signature: [u8; 64], // clip v value
    hashed_message: [u8; 32]
) -> pub Field {
    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);

    assert(key.verify_sig(signature, hashed_message));
    let addr = key.to_eth_address();

    addr
}

#[test]
fn test_ecrecover() {

    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);
    assert(addr == "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266");
}


-------------------------------------------------------------------------------

(source_file
    (import
    (import_identifier
        (identifier))
    (identifier))
    (module
    (identifier))
    (function_definition
    (identifier)
    (parameter
        (identifier)
        (array_type
        (integer))
        (identifier)
        (array_type
        (integer))
        (identifier)
        (array_type
        (integer))
        (comment)
        (identifier)
        (array_type
        (integer)))
    (return_type
        (viewer)
        (single_type))
    (body
        (let_declaration
(binary_expression
              (identifier)
              (function_import
                (import_identifier
                  (identifier))
                (import_identifier
                  (identifier))
                (function_call
                (identifier)
                (parameter
                    (identifier)
                    (identifier))))))
        (assert
        (struct_function
            (identifier)
            (function_call
            (identifier)
            (parameter
                (identifier)
                (identifier)))))
        (let_declaration
        (binary_expression
            (identifier)
            (struct_function
            (identifier)
            (function_call
            (identifier)
            (parameter)))))
        (identifier)))
    (macro
    (identifier))
    (function_definition
    (identifier)
    (parameter)
    (body
        (let_declaration
        (binary_expression
            (identifier)
            (function_call
            (identifier)
            (parameter
            (identifier)
            (identifier)
            (identifier)
            (identifier)))))
        (assert
        (binary_expression
            (identifier)
            (string_literal))))))

================================================================================
Global Program
================================================================================

global N: Field = 5; // Same as `global N: comptime Field = 5`

fn main(x : Field, y : [Field; N]) {
    let res = x * N;

    assert(res == y[0]);

    let res2 = x * mysubmodule::N;
    assert(res != res2);
}

mod mysubmodule {
    use dep::std;

    global N: Field = 10;

    fn my_helper() -> comptime Field {
        let x = N;
        x
    }
}

-------------------------------------------------------------------------------

(source_file
      (global
        (binary_expression
          (identifier)
          (single_type)
          (integer)))
      (comment)
      (function_definition
        (identifier)
        (parameter
          (identifier)
          (single_type)
          (identifier)
          (array_type
            (identifier)))
        (body
          (let_declaration
            (binary_expression
              (identifier)
              (binary_expression
                (identifier)
                (identifier))))
          (assert
            (binary_expression
              (identifier)
              (array_identifier
                (identifier)
                (integer))))
          (let_declaration
            (binary_expression
              (identifier)
              (binary_expression
                (identifier)
                (import_identifier
                  (identifier))
                (identifier))))
          (assert
            (binary_expression
              (identifier)
              (identifier)))))
      (module
        (identifier)
        (body
          (import
            (import_identifier
              (identifier))
            (identifier))
          (global
            (binary_expression
              (identifier)
              (single_type)
              (integer)))
          (function_definition
            (identifier)
            (parameter)
            (return_type
              (comptime)
              (single_type))
            (body
              (let_declaration
                (binary_expression
                  (identifier)
                  (identifier)))
              (identifier))))))
