================================================================================
Basic Program
================================================================================


use dep::std;

mod secp256k1;

fn ecrecover(
    pub_key_x: [u8; 32],
    pub_key_y: [u8; 32],
    signature: [u8; 64], // clip v value
    hashed_message: [u8; 32]
) -> pub Field {
    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);

    assert(key.verify_sig(signature, hashed_message));
    let addr = key.to_eth_address();

    addr
}

#[test]
fn test_ecrecover() {

    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);
    assert(addr == "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266");
}


-------------------------------------------------------------------------------

(source_file
    (import
    (import_identifier
        (identifier))
    (identifier))
    (module
    (identifier))
    (function_definition
    (identifier)
    (parameter
        (identifier)
        (array_type
        (integer))
        (identifier)
        (array_type
        (integer))
        (identifier)
        (array_type
        (integer))
        (comment)
        (identifier)
        (array_type
        (integer)))
    (return_type
        (viewer)
        (single_type))
    (body
        (let_declaration
(binary_expression
              (identifier)
              (function_import
                (import_identifier
                  (identifier))
                (import_identifier
                  (identifier))
                (function_call
                (identifier)
                (parameter
                    (identifier)
                    (identifier))))))
        (assert
        (struct_function
            (identifier)
            (function_call
            (identifier)
            (parameter
                (identifier)
                (identifier)))))
        (let_declaration
        (binary_expression
            (identifier)
            (struct_function
            (identifier)
            (function_call
            (identifier)
            (parameter)))))
        (identifier)))
    (macro
    (identifier))
    (function_definition
    (identifier)
    (parameter)
    (body
        (let_declaration
        (binary_expression
            (identifier)
            (function_call
            (identifier)
            (parameter
            (identifier)
            (identifier)
            (identifier)
            (identifier)))))
        (assert
        (binary_expression
            (identifier)
            (string_literal))))))

================================================================================
Global Program
================================================================================

global N: Field = 5; // Same as `global N: comptime Field = 5`

fn main(x : Field, y : [Field; N]) {
    let res = x * N;

    assert(res == y[0]);

    let res2 = x * mysubmodule::N;
    assert(res != res2);
}

mod mysubmodule {
    use dep::std;

    global N: Field = 10;

    fn my_helper() -> comptime Field {
        let x = N;
        x
    }
}

-------------------------------------------------------------------------------

(source_file
      (global
        (binary_expression
          (identifier)
          (single_type)
          (integer)))
      (comment)
      (function_definition
        (identifier)
        (parameter
          (identifier)
          (single_type)
          (identifier)
          (array_type
            (identifier)))
        (body
          (let_declaration
            (binary_expression
              (identifier)
              (binary_expression
                (identifier)
                (identifier))))
          (assert
            (binary_expression
              (identifier)
              (array_identifier
                (identifier)
                (integer))))
          (let_declaration
            (binary_expression
              (identifier)
              (binary_expression
                (identifier)
                (import_identifier
                  (identifier))
                (identifier))))
          (assert
            (binary_expression
              (identifier)
              (identifier)))))
      (module
        (identifier)
        (body
          (import
            (import_identifier
              (identifier))
            (identifier))
          (global
            (binary_expression
              (identifier)
              (single_type)
              (integer)))
          (function_definition
            (identifier)
            (parameter)
            (return_type
              (comptime)
              (single_type))
            (body
              (let_declaration
                (binary_expression
                  (identifier)
                  (identifier)))
              (identifier))))))


================================================================================
Array Program
================================================================================


impl<T, N> [T; N] {
    #[builtin(array_len)]
    fn len(_array: Self) -> comptime Field {}

    #[builtin(arraysort)]
    fn sort(_array: Self) -> Self {}

    // Sort with a custom sorting function.
    fn sort_via(mut a: Self, ordering: fn(T, T) -> bool) -> Self {
        for i in 1 .. a.len() {
            for j in 0..i {
                if ordering(a[i], a[j]) {
                    let old_a_j = a[j];
                    a[j] = a[i];
                    a[i] = old_a_j;
                }
            }
        }
        a
    }

    // Apply a function to each element of an array, returning a new array
    // containing the mapped elements.
    fn map<U>(self, f: fn(T) -> U) -> [U; N] {
        let first_elem = f(self[0]);
        let mut ret = [first_elem; N];

        for i in 1 .. self.len() {
            ret[i] = f(self[i]);
        }

        ret
    }

    // Apply a function to each element of the array and an accumulator value,
    // returning the final accumulated value. This function is also sometimes
    // called `foldl`, `fold_left`, `reduce`, or `inject`.
    fn fold<U>(self, mut accumulator: U, f: fn(U, T) -> U) -> U {
        for elem in self {
            accumulator = f(accumulator, elem);
        }
        accumulator
    }

    // Apply a function to each element of the array and an accumulator value,
    // returning the final accumulated value. Unlike fold, reduce uses the first
    // element of the given array as its starting accumulator value.
    fn reduce(self, f: fn(T, T) -> T) -> T {
        let mut accumulator = self[0];
        for i in 1 .. self.len() {
            accumulator = f(accumulator, self[i]);
        }
        accumulator
    }

    // Returns true if all elements in the array satisfy the predicate
    fn all(self, predicate: fn(T) -> bool) -> bool {
        let mut ret = true;
        for elem in self {
            ret &= predicate(elem);
        }
        ret
    }

    // Returns true if any element in the array satisfies the predicate
    fn any(self, predicate: fn(T) -> bool) -> bool {
        let mut ret = false;
        for elem in self {
            ret |= predicate(elem);
        }
        ret
    }
}


-------------------------------------------------------------------------------
(source_file
      (struct_method
        (generic
          (identifier)
          (identifier))
        (array_type
          (identifier)
          (identifier))
        (body
          (macro
            (identifier)
            (identifier))
          (function_definition
            (identifier)
            (parameter
              (identifier)
              (single_type))
            (return_type
              (comptime)
              (single_type))
            (body))
          (macro
            (identifier)
            (identifier))
          (function_definition
            (identifier)
            (parameter
              (identifier)
              (single_type))
            (return_type
              (single_type))
            (body))
          (comment)
          (function_definition
            (identifier)
            (parameter
              (mutable)
              (identifier)
              (single_type)
              (identifier)
              (function_type
                (parameter
                  (identifier)
                  (identifier))
                (return_type
                  (single_type))))
            (return_type
              (single_type))
            (body
              (for_loop
                (identifier)
                (range
                  (integer)
                  (struct_function
                    (identifier)
                    (function_call
                      (identifier)
                      (parameter))))
                (body
                  (for_loop
                    (identifier)
                    (range
                      (integer)
                      (identifier))
                    (body
                      (if_exp
                        (function_call
                          (identifier)
                          (parameter
                            (array_identifier
                              (identifier)
                              (identifier))
                            (array_identifier
                              (identifier)
                              (identifier))))
                        (body
                          (let_declaration
                            (binary_expression
                              (identifier)
                              (array_identifier
                                (identifier)
                                (identifier))))
                          (binary_expression
                            (array_identifier
                              (identifier)
                              (identifier))
                            (array_identifier
                              (identifier)
                              (identifier)))
                          (binary_expression
                            (array_identifier
                              (identifier)
                              (identifier))
                            (identifier))))))))
              (identifier)))
          (comment)
          (comment)
          (function_definition
            (identifier)
            (generic
              (identifier))
            (parameter
              (self_method
                (self))
              (identifier)
              (function_type
                (parameter
                  (identifier))
                (return_type
                  (identifier))))
            (return_type
              (array_type
                (identifier)
                (identifier)))
            (body
              (let_declaration
                (binary_expression
                  (identifier)
                  (function_call
                    (identifier)
                    (parameter
                      (self_method
                        (self)
                        (array
                          (integer)))))))
              (let_declaration
                (mutable)
                (binary_expression
                  (identifier)
                  (array
                    (identifier)
                    (identifier))))
              (for_loop
                (identifier)
                (range
                  (integer)
                  (self_method
                    (self)
                    (function_call
                      (identifier)
                      (parameter))))
                (body
                  (binary_expression
                    (array_identifier
                      (identifier)
                      (identifier))
                    (function_call
                      (identifier)
                      (parameter
                        (self_method
                          (self)
                          (array
                            (identifier))))))))
              (identifier)))
          (comment)
          (comment)
          (comment)
          (function_definition
            (identifier)
            (generic
              (identifier))
            (parameter
              (self_method
                (self))
              (mutable)
              (identifier)
              (identifier)
              (identifier)
              (function_type
                (parameter
                  (identifier)
                  (identifier))
                (return_type
                  (identifier))))
            (return_type
              (identifier))
            (body
              (for_loop
                (identifier)
                (self_method
                  (self))
                (body
                  (binary_expression
                    (identifier)
                    (function_call
                      (identifier)
                      (parameter
                        (identifier)
                        (identifier))))))
              (identifier)))
          (comment)
          (comment)
          (comment)
          (function_definition
            (identifier)
            (parameter
              (self_method
                (self))
              (identifier)
              (function_type
                (parameter
                  (identifier)
                  (identifier))
                (return_type
                  (identifier))))
            (return_type
              (identifier))
            (body
              (let_declaration
                (mutable)
                (binary_expression
                  (identifier)
                  (self_method
                    (self)
                    (array
                      (integer)))))
              (for_loop
                (identifier)
                (range
                  (integer)
                  (self_method
                    (self)
                    (function_call
                      (identifier)
                      (parameter))))
                (body
                  (binary_expression
                    (identifier)
                    (function_call
                      (identifier)
                      (parameter
                        (identifier)
                        (self_method
                          (self)
                          (array
                            (identifier))))))))
              (identifier)))
          (comment)
          (function_definition
            (identifier)
            (parameter
              (self_method
                (self))
              (identifier)
              (function_type
                (parameter
                  (identifier))
                (return_type
                  (single_type))))
            (return_type
              (single_type))
            (body
              (let_declaration
                (mutable)
                (binary_expression
                  (identifier)
                  (boolean)))
              (for_loop
                (identifier)
                (self_method
                  (self))
                (body
                  (binary_expression
                    (identifier)
                    (function_call
                      (identifier)
                      (parameter
                        (identifier))))))
              (identifier)))
          (comment)
          (function_definition
            (identifier)
            (parameter
              (self_method
                (self))
              (identifier)
              (function_type
                (parameter
                  (identifier))
                (return_type
                  (single_type))))
            (return_type
              (single_type))
            (body
              (let_declaration
                (mutable)
                (binary_expression
                  (identifier)
                  (boolean)))
              (for_loop
                (identifier)
                (self_method
                  (self))
                (body
                  (binary_expression
                    (identifier)
                    (function_call
                      (identifier)
                      (parameter
                        (identifier))))))
              (identifier))))))
