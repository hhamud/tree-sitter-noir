============================================
Function Call
============================================

let x = get_octopus();


-------------------------------------------------------------------------------

(source_file
      (let_declaration
        (binary_expression
        (identifier)
          (function_call
            (identifier)
            (parameter)))))

============================================
Empty Function
============================================

fn foo() {}


-------------------------------------------------------------------------------

(source_file
  (function_definition
   (identifier)
   (parameter)
   (body)))



============================================
Function with inputs
============================================

fn foo(x : Field, y : pub Field){}

-------------------------------------------------------------------------------

(source_file
      (function_definition
        (identifier)
        (parameter
          (typed_identifier
            (identifier)
            (single_type))
          (typed_identifier
            (identifier)
            (viewer)
            (single_type)))
        (body)))

============================================
Function with inputs and return body
============================================

fn foo(x : Field, y : pub Field) -> pub Field {
   x + y;
}

-------------------------------------------------------------------------------
(source_file
      (function_definition
        (identifier)
        (parameter
          (typed_identifier
            (identifier)
            (single_type))
          (typed_identifier
            (identifier)
            (viewer)
            (single_type)))
        (return_type
          (viewer)
          (single_type))
        (body
          (binary_expression
            (identifier)
            (identifier)))))

=====================================
Array Function
============================================

fn sha256(_input : [u8]) -> [u8; 32]{}

-------------------------------------------------------------------------------

(source_file
      (function_definition
        (identifier)
        (parameter
          (typed_identifier
            (identifier)
            (array_type
              (single_type))))
        (return_type
          (array_type
            (single_type)
            (integer)))
        (body)))



=====================================
Generic Functions
============================================

fn id<T>(x: T) -> T  {
    return x;
}


-------------------------------------------------------------------------------

 (source_file
      (function_definition
        (identifier)
        (generic
          (identifier))
        (parameter
          (typed_identifier
            (identifier)
            (identifier)))
        (return_type
          (identifier))
        (body
          (return)
          (identifier))))
